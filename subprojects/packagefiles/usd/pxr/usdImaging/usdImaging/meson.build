cpp = meson.get_compiler('cpp')

usdImaging_lib = shared_library(
    'usd_usdImaging',
    [
        # PUBLIC_CLASSES
        'adapterRegistry.cpp',
        'collectionCache.cpp',
        'dataSourceAttribute.cpp',
        'dataSourceBasisCurves.cpp',
        'dataSourceCamera.cpp',
        'dataSourceGprim.cpp',
        'dataSourceMaterial.cpp',
        'dataSourceMesh.cpp',
        'dataSourcePointInstancer.cpp',
        'dataSourcePoints.cpp',
        'dataSourcePrim.cpp',
        'dataSourcePrimvars.cpp',
        'dataSourceRelationship.cpp',
        'dataSourceRenderPrims.cpp',
        'dataSourceStage.cpp',
        'dataSourceStageGlobals.cpp',
        'dataSourceUsdPrimInfo.cpp',
        'dataSourceVolume.cpp',
        'debugCodes.cpp',
        'delegate.cpp',
        'drawModeAdapter.cpp',
        'drawModeSceneIndex.cpp',
        'indexProxy.cpp',
        'materialParamUtils.cpp',
        'modelSchema.cpp',
        'primvarUtils.cpp',
        'resolvedAttributeCache.cpp',
        'instancerContext.cpp',
        'stageSceneIndex.cpp',
        'selectionSceneIndex.cpp',
        'tokens.cpp',
        'apiSchemaAdapter.cpp',
        'basisCurvesAdapter.cpp',
        'capsuleAdapter.cpp',
        'cameraAdapter.cpp',
        'collectionAPIAdapter.cpp',
        'coneAdapter.cpp',
        'coordSysAdapter.cpp',
        'coordSysAPIAdapter.cpp',
        'cubeAdapter.cpp',
        'cylinderAdapter.cpp',
        'cylinderLightAdapter.cpp',
        'diskLightAdapter.cpp',
        'displayFilterAdapter.cpp',
        'distantLightAdapter.cpp',
        'domeLightAdapter.cpp',
        'fieldAdapter.cpp',
        'geometryLightAdapter.cpp',
        'gprimAdapter.cpp',
        'hermiteCurvesAdapter.cpp',
        'implicitSurfaceMeshUtils.cpp',
        'instanceAdapter.cpp',
        'lightAdapter.cpp',
        'lightAPIAdapter.cpp',
        'lightFilterAdapter.cpp',
        'materialAdapter.cpp',
        'materialBindingAPIAdapter.cpp',
        'meshAdapter.cpp',
        'niPrototypePropagatingSceneIndex.cpp',
        'nurbsCurvesAdapter.cpp',
        'nurbsPatchAdapter.cpp',
        'piPrototypePropagatingSceneIndex.cpp',
        'planeAdapter.cpp',
        'pluginLightAdapter.cpp',
        'pluginLightFilterAdapter.cpp',
        'pointsAdapter.cpp',
        'pointInstancerAdapter.cpp',
        'portalLightAdapter.cpp',
        'primAdapter.cpp',
        'primvarDescCache.cpp',
        'usdPrimInfoSchema.cpp',
        'usdRenderProductSchema.cpp',
        'usdRenderSettingsSchema.cpp',
        'usdRenderVarSchema.cpp',
        'rectLightAdapter.cpp',
        'renderProductAdapter.cpp',
        'renderSettingsAdapter.cpp',
        'renderSettingsFlatteningSceneIndex.cpp',
        'renderVarAdapter.cpp',
        'representedByAncestorPrimAdapter.cpp',
        'rerootingSceneIndex.cpp',
        'sampleFilterAdapter.cpp',
        'sphereAdapter.cpp',
        'sphereLightAdapter.cpp',
        'textureUtils.cpp',
        'volumeAdapter.cpp',

        # PRIVATE_CLASSES
        'drawModeStandin.cpp',
        'niInstanceAggregationSceneIndex.cpp',
        'niPrototypePruningSceneIndex.cpp',
        'niPrototypeSceneIndex.cpp',
        'piPrototypeSceneIndex.cpp',
    ],
    install: true,
    implicit_include_directories: false,
    cpp_args: args + ['-DUSDIMAGING_EXPORTS=1'],
    dependencies: [usd_dep, usd_imaging_dep],
    link_with: [],
)

cdata = configuration_data()
cdata.set('PLUG_INFO_LIBRARY_PATH', '../../usd_usdImaging.dll')
cdata.set('PLUG_INFO_RESOURCE_PATH', 'resources')
cdata.set('PLUG_INFO_ROOT', '..')
configure_file(
    input: 'plugInfo.json',
    output: 'plugInfo.json',
    install: true,
    install_dir: 'bin/pluginfo/usdImaging/resources',
    configuration: cdata,
)


