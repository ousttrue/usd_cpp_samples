"//\n"
"//   Copyright 2018 Pixar\n"
"//\n"
"//   Licensed under the Apache License, Version 2.0 (the \"Apache License\")\n"
"//   with the following modification; you may not use this file except in\n"
"//   compliance with the Apache License and the following modification to it:\n"
"//   Section 6. Trademarks. is deleted and replaced with:\n"
"//\n"
"//   6. Trademarks. This License does not grant permission to use the trade\n"
"//      names, trademarks, service marks, or product names of the Licensor\n"
"//      and its affiliates, except as required to comply with Section 4(c) of\n"
"//      the License and to reproduce the content of the NOTICE file.\n"
"//\n"
"//   You may obtain a copy of the Apache License at\n"
"//\n"
"//       http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"//   Unless required by applicable law or agreed to in writing, software\n"
"//   distributed under the Apache License with the above modification is\n"
"//   distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n"
"//   KIND, either express or implied. See the Apache License for the specific\n"
"//   language governing permissions and limitations under the Apache License.\n"
"//\n"
"\n"
"#ifndef OPENSUBDIV3_OSD_PATCH_BASIS_COMMON_TYPES_H\n"
"#define OPENSUBDIV3_OSD_PATCH_BASIS_COMMON_TYPES_H\n"
"\n"
"#if defined(OSD_PATCH_BASIS_GLSL)\n"
"\n"
"    #define OSD_FUNCTION_STORAGE_CLASS\n"
"    #define OSD_DATA_STORAGE_CLASS\n"
"    #define OSD_REAL float\n"
"    #define OSD_REAL_CAST float\n"
"    #define OSD_OPTIONAL(a) true\n"
"    #define OSD_OPTIONAL_INIT(a,b) b\n"
"    #define OSD_ARRAY_ARG_BOUND_OPTIONAL 0\n"
"    #define OSD_IN_ARRAY(elementType, identifier, arraySize) "
"            elementType identifier[arraySize]\n"
"    #define OSD_OUT_ARRAY(elementType, identifier, arraySize) "
"            out elementType identifier[arraySize]\n"
"    #define OSD_INOUT_ARRAY(elementType, identifier, arraySize) "
"            inout elementType identifier[arraySize]\n"
"    #define OSD_ARRAY_2(elementType,a0,a1) "
"            elementType[](a0,a1)\n"
"    #define OSD_ARRAY_3(elementType,a0,a1,a2) "
"            elementType[](a0,a1,a2)\n"
"    #define OSD_ARRAY_4(elementType,a0,a1,a2,a3) "
"            elementType[](a0,a1,a2,a3)\n"
"    #define OSD_ARRAY_6(elementType,a0,a1,a2,a3,a4,a5) "
"            elementType[](a0,a1,a2,a3,a4,a5)\n"
"    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7) "
"            elementType[](a0,a1,a2,a3,a4,a5,a6,a7)\n"
"    #define OSD_ARRAY_9(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8) "
"            elementType[](a0,a1,a2,a3,a4,a5,a6,a7,a8)\n"
"    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) "
"            elementType[](a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)\n"
"\n"
"#elif defined(OSD_PATCH_BASIS_HLSL)\n"
"\n"
"    #define OSD_FUNCTION_STORAGE_CLASS\n"
"    #define OSD_DATA_STORAGE_CLASS\n"
"    #define OSD_REAL float\n"
"    #define OSD_REAL_CAST float\n"
"    #define OSD_OPTIONAL(a) true\n"
"    #define OSD_OPTIONAL_INIT(a,b) b\n"
"    #define OSD_ARRAY_ARG_BOUND_OPTIONAL 0\n"
"    #define OSD_IN_ARRAY(elementType, identifier, arraySize) "
"            elementType identifier[arraySize]\n"
"    #define OSD_OUT_ARRAY(elementType, identifier, arraySize) "
"            out elementType identifier[arraySize]\n"
"    #define OSD_INOUT_ARRAY(elementType, identifier, arraySize) "
"            inout elementType identifier[arraySize]\n"
"    #define OSD_ARRAY_2(elementType,a0,a1) "
"            {a0,a1}\n"
"    #define OSD_ARRAY_3(elementType,a0,a1,a2) "
"            {a0,a1,a2}\n"
"    #define OSD_ARRAY_4(elementType,a0,a1,a2,a3) "
"            {a0,a1,a2,a3}\n"
"    #define OSD_ARRAY_6(elementType,a0,a1,a2,a3,a4,a5) "
"            {a0,a1,a2,a3,a4,a5}\n"
"    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7) "
"            {a0,a1,a2,a3,a4,a5,a6,a7}\n"
"    #define OSD_ARRAY_9(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8) "
"            {a0,a1,a2,a3,a4,a5,a6,a7,a8}\n"
"    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) "
"            {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}\n"
"\n"
"#elif defined(OSD_PATCH_BASIS_CUDA)\n"
"\n"
"    #define OSD_FUNCTION_STORAGE_CLASS __device__\n"
"    #define OSD_DATA_STORAGE_CLASS\n"
"    #define OSD_REAL float\n"
"    #define OSD_REAL_CAST float\n"
"    #define OSD_OPTIONAL(a) true\n"
"    #define OSD_OPTIONAL_INIT(a,b) b\n"
"    #define OSD_ARRAY_ARG_BOUND_OPTIONAL 0\n"
"    #define OSD_IN_ARRAY(elementType, identifier, arraySize) "
"            elementType identifier[arraySize]\n"
"    #define OSD_OUT_ARRAY(elementType, identifier, arraySize) "
"            elementType identifier[arraySize]\n"
"    #define OSD_INOUT_ARRAY(elementType, identifier, arraySize) "
"            elementType identifier[arraySize]\n"
"    #define OSD_ARRAY_2(elementType,a0,a1) "
"            {a0,a1}\n"
"    #define OSD_ARRAY_3(elementType,a0,a1,a2) "
"            {a0,a1,a2}\n"
"    #define OSD_ARRAY_4(elementType,a0,a1,a2,a3) "
"            {a0,a1,a2,a3}\n"
"    #define OSD_ARRAY_6(elementType,a0,a1,a2,a3,a4,a5) "
"            {a0,a1,a2,a3,a4,a5}\n"
"    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7) "
"            {a0,a1,a2,a3,a4,a5,a6,a7}\n"
"    #define OSD_ARRAY_9(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8) "
"            {a0,a1,a2,a3,a4,a5,a6,a7,a8}\n"
"    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) "
"            {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}\n"
"\n"
"#elif defined(OSD_PATCH_BASIS_OPENCL)\n"
"\n"
"    #define OSD_FUNCTION_STORAGE_CLASS static\n"
"    #define OSD_DATA_STORAGE_CLASS\n"
"    #define OSD_REAL float\n"
"    #define OSD_REAL_CAST convert_float\n"
"    #define OSD_OPTIONAL(a) true\n"
"    #define OSD_OPTIONAL_INIT(a,b) b\n"
"    #define OSD_ARRAY_ARG_BOUND_OPTIONAL 0\n"
"    #define OSD_IN_ARRAY(elementType, identifier, arraySize) "
"            elementType identifier[arraySize]\n"
"    #define OSD_OUT_ARRAY(elementType, identifier, arraySize) "
"            elementType identifier[arraySize]\n"
"    #define OSD_INOUT_ARRAY(elementType, identifier, arraySize) "
"            elementType identifier[arraySize]\n"
"    #define OSD_ARRAY_2(elementType,a0,a1) "
"            {a0,a1}\n"
"    #define OSD_ARRAY_3(elementType,a0,a1,a2) "
"            {a0,a1,a2}\n"
"    #define OSD_ARRAY_4(elementType,a0,a1,a2,a3) "
"            {a0,a1,a2,a3}\n"
"    #define OSD_ARRAY_6(elementType,a0,a1,a2,a3,a4,a5) "
"            {a0,a1,a2,a3,a4,a5}\n"
"    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7) "
"            {a0,a1,a2,a3,a4,a5,a6,a7}\n"
"    #define OSD_ARRAY_9(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8) "
"            {a0,a1,a2,a3,a4,a5,a6,a7,a8}\n"
"    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) "
"            {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}\n"
"\n"
"#elif defined(OSD_PATCH_BASIS_METAL)\n"
"\n"
"    #define OSD_FUNCTION_STORAGE_CLASS\n"
"    #define OSD_DATA_STORAGE_CLASS\n"
"    #define OSD_REAL float\n"
"    #define OSD_REAL_CAST float\n"
"    #define OSD_OPTIONAL(a) true\n"
"    #define OSD_OPTIONAL_INIT(a,b) b\n"
"    #define OSD_ARRAY_ARG_BOUND_OPTIONAL 0\n"
"    #define OSD_IN_ARRAY(elementType, identifier, arraySize) "
"            thread elementType* identifier\n"
"    #define OSD_OUT_ARRAY(elementType, identifier, arraySize) "
"            thread elementType* identifier\n"
"    #define OSD_INOUT_ARRAY(elementType, identifier, arraySize) "
"            thread elementType* identifier\n"
"    #define OSD_ARRAY_2(elementType,a0,a1) "
"            {a0,a1}\n"
"    #define OSD_ARRAY_3(elementType,a0,a1,a2) "
"            {a0,a1,a2}\n"
"    #define OSD_ARRAY_4(elementType,a0,a1,a2,a3) "
"            {a0,a1,a2,a3}\n"
"    #define OSD_ARRAY_6(elementType,a0,a1,a2,a3,a4,a5) "
"            {a0,a1,a2,a3,a4,a5}\n"
"    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7) "
"            {a0,a1,a2,a3,a4,a5,a6,a7}\n"
"    #define OSD_ARRAY_9(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8) "
"            {a0,a1,a2,a3,a4,a5,a6,a7,a8}\n"
"    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) "
"            {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}\n"
"\n"
"#else\n"
"\n"
"    #define OSD_FUNCTION_STORAGE_CLASS static inline\n"
"    #define OSD_DATA_STORAGE_CLASS static\n"
"    #define OSD_REAL float\n"
"    #define OSD_REAL_CAST float\n"
"    #define OSD_OPTIONAL(a) (a)\n"
"    #define OSD_OPTIONAL_INIT(a,b) (a ? b : 0)\n"
"    #define OSD_ARRAY_ARG_BOUND_OPTIONAL 1\n"
"    #define OSD_IN_ARRAY(elementType, identifier, arraySize) "
"            elementType identifier[arraySize]\n"
"    #define OSD_OUT_ARRAY(elementType, identifier, arraySize) "
"            elementType identifier[arraySize]\n"
"    #define OSD_INOUT_ARRAY(elementType, identifier, arraySize) "
"            elementType identifier[arraySize]\n"
"    #define OSD_ARRAY_2(elementType,a0,a1) "
"            {a0,a1}\n"
"    #define OSD_ARRAY_3(elementType,a0,a1,a2) "
"            {a0,a1,a2}\n"
"    #define OSD_ARRAY_4(elementType,a0,a1,a2,a3) "
"            {a0,a1,a2,a3}\n"
"    #define OSD_ARRAY_6(elementType,a0,a1,a2,a3,a4,a5) "
"            {a0,a1,a2,a3,a4,a5}\n"
"    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7) "
"            {a0,a1,a2,a3,a4,a5,a6,a7}\n"
"    #define OSD_ARRAY_9(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8) "
"            {a0,a1,a2,a3,a4,a5,a6,a7,a8}\n"
"    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) "
"            {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}\n"
"\n"
"#endif\n"
"\n"
"#if defined(OSD_PATCH_BASIS_OPENCL)\n"
"// OpenCL binding uses typedef to provide the required \"struct\" type specifier.\n"
"typedef struct OsdPatchParam OsdPatchParam;\n"
"typedef struct OsdPatchArray OsdPatchArray;\n"
"typedef struct OsdPatchCoord OsdPatchCoord;\n"
"#endif\n"
"\n"
"// Osd reflection of Far::PatchDescriptor\n"
"#define OSD_PATCH_DESCRIPTOR_QUADS            3\n"
"#define OSD_PATCH_DESCRIPTOR_TRIANGLES        4\n"
"#define OSD_PATCH_DESCRIPTOR_LOOP             5\n"
"#define OSD_PATCH_DESCRIPTOR_REGULAR          6\n"
"#define OSD_PATCH_DESCRIPTOR_GREGORY_BASIS    9\n"
"#define OSD_PATCH_DESCRIPTOR_GREGORY_TRIANGLE 10\n"
"\n"
"// Osd reflection of Osd::PatchCoord\n"
"struct OsdPatchCoord {\n"
"   int arrayIndex;\n"
"   int patchIndex;\n"
"   int vertIndex;\n"
"   float s;\n"
"   float t;\n"
"};\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"OsdPatchCoord\n"
"OsdPatchCoordInit(\n"
"    int arrayIndex, int patchIndex, int vertIndex, float s, float t)\n"
"{\n"
"    OsdPatchCoord coord;\n"
"    coord.arrayIndex = arrayIndex;\n"
"    coord.patchIndex = patchIndex;\n"
"    coord.vertIndex = vertIndex;\n"
"    coord.s = s;\n"
"    coord.t = t;\n"
"    return coord;\n"
"}\n"
"\n"
"// Osd reflection of Osd::PatchArray\n"
"struct OsdPatchArray {\n"
"    int regDesc;\n"
"    int desc;\n"
"    int numPatches;\n"
"    int indexBase;\n"
"    int stride;\n"
"    int primitiveIdBase;\n"
"};\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"OsdPatchArray\n"
"OsdPatchArrayInit(\n"
"    int regDesc, int desc,\n"
"    int numPatches, int indexBase, int stride, int primitiveIdBase)\n"
"{\n"
"    OsdPatchArray array;\n"
"    array.regDesc = regDesc;\n"
"    array.desc = desc;\n"
"    array.numPatches = numPatches;\n"
"    array.indexBase = indexBase;\n"
"    array.stride = stride;\n"
"    array.primitiveIdBase = primitiveIdBase;\n"
"    return array;\n"
"}\n"
"\n"
"// Osd reflection of Osd::PatchParam\n"
"struct OsdPatchParam {\n"
"    int field0;\n"
"    int field1;\n"
"    float sharpness;\n"
"};\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"OsdPatchParam\n"
"OsdPatchParamInit(int field0, int field1, float sharpness)\n"
"{\n"
"    OsdPatchParam param;\n"
"    param.field0 = field0;\n"
"    param.field1 = field1;\n"
"    param.sharpness = sharpness;\n"
"    return param;\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"int\n"
"OsdPatchParamGetFaceId(OsdPatchParam param)\n"
"{\n"
"    return (param.field0 & 0xfffffff);\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"int\n"
"OsdPatchParamGetU(OsdPatchParam param)\n"
"{\n"
"    return ((param.field1 >> 22) & 0x3ff);\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"int\n"
"OsdPatchParamGetV(OsdPatchParam param)\n"
"{\n"
"    return ((param.field1 >> 12) & 0x3ff);\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"int\n"
"OsdPatchParamGetTransition(OsdPatchParam param)\n"
"{\n"
"    return ((param.field0 >> 28) & 0xf);\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"int\n"
"OsdPatchParamGetBoundary(OsdPatchParam param)\n"
"{\n"
"    return ((param.field1 >> 7) & 0x1f);\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"int\n"
"OsdPatchParamGetNonQuadRoot(OsdPatchParam param)\n"
"{\n"
"    return ((param.field1 >> 4) & 0x1);\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"int\n"
"OsdPatchParamGetDepth(OsdPatchParam param)\n"
"{\n"
"    return (param.field1 & 0xf);\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"OSD_REAL\n"
"OsdPatchParamGetParamFraction(OsdPatchParam param)\n"
"{\n"
"    return 1.0f / OSD_REAL_CAST(1 <<\n"
"        (OsdPatchParamGetDepth(param) - OsdPatchParamGetNonQuadRoot(param)));\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"bool\n"
"OsdPatchParamIsRegular(OsdPatchParam param)\n"
"{\n"
"    return (((param.field1 >> 5) & 0x1) != 0);\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"bool\n"
"OsdPatchParamIsTriangleRotated(OsdPatchParam param)\n"
"{\n"
"    return ((OsdPatchParamGetU(param) + OsdPatchParamGetV(param)) >=\n"
"            (1 << OsdPatchParamGetDepth(param)));\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"void\n"
"OsdPatchParamNormalize(\n"
"        OsdPatchParam param,\n"
"        OSD_INOUT_ARRAY(OSD_REAL, uv, 2))\n"
"{\n"
"    OSD_REAL fracInv = 1.0f / OsdPatchParamGetParamFraction(param);\n"
"\n"
"    uv[0] = uv[0] * fracInv - OSD_REAL_CAST(OsdPatchParamGetU(param));\n"
"    uv[1] = uv[1] * fracInv - OSD_REAL_CAST(OsdPatchParamGetV(param));\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"void\n"
"OsdPatchParamUnnormalize(\n"
"        OsdPatchParam param,\n"
"        OSD_INOUT_ARRAY(OSD_REAL, uv, 2))\n"
"{\n"
"    OSD_REAL frac = OsdPatchParamGetParamFraction(param);\n"
"\n"
"    uv[0] = (uv[0] + OSD_REAL_CAST(OsdPatchParamGetU(param))) * frac;\n"
"    uv[1] = (uv[1] + OSD_REAL_CAST(OsdPatchParamGetV(param))) * frac;\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"void\n"
"OsdPatchParamNormalizeTriangle(\n"
"        OsdPatchParam param,\n"
"        OSD_INOUT_ARRAY(OSD_REAL, uv, 2))\n"
"{\n"
"    if (OsdPatchParamIsTriangleRotated(param)) {\n"
"        OSD_REAL fracInv = 1.0f / OsdPatchParamGetParamFraction(param);\n"
"\n"
"        int depthFactor = 1 << OsdPatchParamGetDepth(param);\n"
"        uv[0] = OSD_REAL_CAST(depthFactor - OsdPatchParamGetU(param)) - (uv[0] * fracInv);\n"
"        uv[1] = OSD_REAL_CAST(depthFactor - OsdPatchParamGetV(param)) - (uv[1] * fracInv);\n"
"    } else {\n"
"        OsdPatchParamNormalize(param, uv);\n"
"    }\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"void\n"
"OsdPatchParamUnnormalizeTriangle(\n"
"        OsdPatchParam param,\n"
"        OSD_INOUT_ARRAY(OSD_REAL, uv, 2))\n"
"{\n"
"    if (OsdPatchParamIsTriangleRotated(param)) {\n"
"        OSD_REAL frac = OsdPatchParamGetParamFraction(param);\n"
"\n"
"        int depthFactor = 1 << OsdPatchParamGetDepth(param);\n"
"        uv[0] = (OSD_REAL_CAST(depthFactor - OsdPatchParamGetU(param)) - uv[0]) * frac;\n"
"        uv[1] = (OSD_REAL_CAST(depthFactor - OsdPatchParamGetV(param)) - uv[1]) * frac;\n"
"    } else {\n"
"        OsdPatchParamUnnormalize(param, uv);\n"
"    }\n"
"}\n"
"\n"
"#endif /* OPENSUBDIV3_OSD_PATCH_BASIS_COMMON_TYPES_H */\n"
"\n"
