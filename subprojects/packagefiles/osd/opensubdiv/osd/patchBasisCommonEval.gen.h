"//\n"
"//   Copyright 2018 Pixar\n"
"//\n"
"//   Licensed under the Apache License, Version 2.0 (the \"Apache License\")\n"
"//   with the following modification; you may not use this file except in\n"
"//   compliance with the Apache License and the following modification to it:\n"
"//   Section 6. Trademarks. is deleted and replaced with:\n"
"//\n"
"//   6. Trademarks. This License does not grant permission to use the trade\n"
"//      names, trademarks, service marks, or product names of the Licensor\n"
"//      and its affiliates, except as required to comply with Section 4(c) of\n"
"//      the License and to reproduce the content of the NOTICE file.\n"
"//\n"
"//   You may obtain a copy of the Apache License at\n"
"//\n"
"//       http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"//   Unless required by applicable law or agreed to in writing, software\n"
"//   distributed under the Apache License with the above modification is\n"
"//   distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n"
"//   KIND, either express or implied. See the Apache License for the specific\n"
"//   language governing permissions and limitations under the Apache License.\n"
"//\n"
"\n"
"#ifndef OPENSUBDIV3_OSD_PATCH_BASIS_COMMON_EVAL_H\n"
"#define OPENSUBDIV3_OSD_PATCH_BASIS_COMMON_EVAL_H\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"// template <typename REAL>\n"
"int\n"
"OsdEvaluatePatchBasisNormalized(\n"
"    int patchType, OsdPatchParam param,\n"
"    OSD_REAL s, OSD_REAL t,\n"
"    OSD_OUT_ARRAY(OSD_REAL, wP, 20),\n"
"    OSD_OUT_ARRAY(OSD_REAL, wDs, 20),\n"
"    OSD_OUT_ARRAY(OSD_REAL, wDt, 20),\n"
"    OSD_OUT_ARRAY(OSD_REAL, wDss, 20),\n"
"    OSD_OUT_ARRAY(OSD_REAL, wDst, 20),\n"
"    OSD_OUT_ARRAY(OSD_REAL, wDtt, 20)) {\n"
"\n"
"    int boundaryMask = OsdPatchParamGetBoundary(param);\n"
"\n"
"    int nPoints = 0;\n"
"    if (patchType == OSD_PATCH_DESCRIPTOR_REGULAR) {\n"
"#if OSD_ARRAY_ARG_BOUND_OPTIONAL\n"
"        nPoints = Osd_EvalBasisBSpline(s, t, wP, wDs, wDt, wDss, wDst, wDtt);\n"
"        if (boundaryMask != 0) {\n"
"            Osd_boundBasisBSpline(\n"
"                boundaryMask, wP, wDs, wDt, wDss, wDst, wDtt);\n"
"        }\n"
"#else\n"
"        OSD_REAL wP16[16], wDs16[16], wDt16[16],\n"
"                 wDss16[16], wDst16[16], wDtt16[16];\n"
"        nPoints = Osd_EvalBasisBSpline(\n"
"                s, t, wP16, wDs16, wDt16, wDss16, wDst16, wDtt16);\n"
"        if (boundaryMask != 0) {\n"
"            Osd_boundBasisBSpline(\n"
"                boundaryMask, wP16, wDs16, wDt16, wDss16, wDst16, wDtt16);\n"
"        }\n"
"        for (int i=0; i<nPoints; ++i) {\n"
"            wP[i] = wP16[i];\n"
"            wDs[i] = wDs16[i]; wDt[i] = wDt16[i];\n"
"            wDss[i] = wDss16[i]; wDst[i] = wDst16[i]; wDtt[i] = wDtt16[i];\n"
"        }\n"
"#endif\n"
"    } else if (patchType == OSD_PATCH_DESCRIPTOR_LOOP) {\n"
"#if OSD_ARRAY_ARG_BOUND_OPTIONAL\n"
"        nPoints = Osd_EvalBasisBoxSplineTri(\n"
"                s, t, wP, wDs, wDt, wDss, wDst, wDtt);\n"
"        if (boundaryMask != 0) {\n"
"            Osd_boundBasisBoxSplineTri(\n"
"                boundaryMask, wP, wDs, wDt, wDss, wDst, wDtt);\n"
"        }\n"
"#else\n"
"        OSD_REAL wP12[12], wDs12[12], wDt12[12],\n"
"                 wDss12[12], wDst12[12], wDtt12[12];\n"
"        nPoints = Osd_EvalBasisBoxSplineTri(\n"
"                s, t, wP12, wDs12, wDt12, wDss12, wDst12, wDtt12);\n"
"        if (boundaryMask != 0) {\n"
"            Osd_boundBasisBoxSplineTri(\n"
"                boundaryMask, wP12, wDs12, wDt12, wDss12, wDst12, wDtt12);\n"
"        }\n"
"        for (int i=0; i<nPoints; ++i) {\n"
"            wP[i] = wP12[i];\n"
"            wDs[i] = wDs12[i]; wDt[i] = wDt12[i];\n"
"            wDss[i] = wDss12[i]; wDst[i] = wDst12[i]; wDtt[i] = wDtt12[i];\n"
"        }\n"
"#endif\n"
"    } else if (patchType == OSD_PATCH_DESCRIPTOR_GREGORY_BASIS) {\n"
"        nPoints = Osd_EvalBasisGregory(s, t, wP, wDs, wDt, wDss, wDst, wDtt);\n"
"    } else if (patchType == OSD_PATCH_DESCRIPTOR_GREGORY_TRIANGLE) {\n"
"#if OSD_ARRAY_ARG_BOUND_OPTIONAL\n"
"        nPoints = Osd_EvalBasisGregoryTri(s, t, wP, wDs, wDt, wDss, wDst, wDtt);\n"
"#else\n"
"        OSD_REAL wP18[18], wDs18[18], wDt18[18],\n"
"                 wDss18[18], wDst18[18], wDtt18[18];\n"
"        nPoints = Osd_EvalBasisGregoryTri(\n"
"                s, t, wP18, wDs18, wDt18, wDss18, wDst18, wDtt18);\n"
"        for (int i=0; i<nPoints; ++i) {\n"
"            wP[i] = wP18[i];\n"
"            wDs[i] = wDs18[i]; wDt[i] = wDt18[i];\n"
"            wDss[i] = wDss18[i]; wDst[i] = wDst18[i]; wDtt[i] = wDtt18[i];\n"
"        }\n"
"#endif\n"
"    } else if (patchType == OSD_PATCH_DESCRIPTOR_QUADS) {\n"
"#if OSD_ARRAY_ARG_BOUND_OPTIONAL\n"
"        nPoints = Osd_EvalBasisLinear(s, t, wP, wDs, wDt, wDss, wDst, wDtt);\n"
"#else\n"
"        OSD_REAL wP4[4], wDs4[4], wDt4[4],\n"
"                 wDss4[4], wDst4[4], wDtt4[4];\n"
"        nPoints = Osd_EvalBasisLinear(\n"
"                s, t, wP4, wDs4, wDt4, wDss4, wDst4, wDtt4);\n"
"        for (int i=0; i<nPoints; ++i) {\n"
"            wP[i] = wP4[i];\n"
"            wDs[i] = wDs4[i]; wDt[i] = wDt4[i];\n"
"            wDss[i] = wDss4[i]; wDst[i] = wDst4[i]; wDtt[i] = wDtt4[i];\n"
"        }\n"
"#endif\n"
"    } else if (patchType == OSD_PATCH_DESCRIPTOR_TRIANGLES) {\n"
"#if OSD_ARRAY_ARG_BOUND_OPTIONAL\n"
"        nPoints = Osd_EvalBasisLinearTri(s, t, wP, wDs, wDt, wDss, wDst, wDtt);\n"
"#else\n"
"        OSD_REAL wP3[3], wDs3[3], wDt3[3],\n"
"                 wDss3[3], wDst3[3], wDtt3[3];\n"
"        nPoints = Osd_EvalBasisLinearTri(\n"
"                s, t, wP3, wDs3, wDt3, wDss3, wDst3, wDtt3);\n"
"        for (int i=0; i<nPoints; ++i) {\n"
"            wP[i] = wP3[i];\n"
"            wDs[i] = wDs3[i]; wDt[i] = wDt3[i];\n"
"            wDss[i] = wDss3[i]; wDst[i] = wDst3[i]; wDtt[i] = wDtt3[i];\n"
"        }\n"
"#endif\n"
"    } else {\n"
"        // assert(0);\n"
"    }\n"
"    return nPoints;\n"
"}\n"
"\n"
"OSD_FUNCTION_STORAGE_CLASS\n"
"// template <typename REAL>\n"
"int\n"
"OsdEvaluatePatchBasis(\n"
"    int patchType, OsdPatchParam param,\n"
"    OSD_REAL s, OSD_REAL t,\n"
"    OSD_OUT_ARRAY(OSD_REAL, wP, 20),\n"
"    OSD_OUT_ARRAY(OSD_REAL, wDs, 20),\n"
"    OSD_OUT_ARRAY(OSD_REAL, wDt, 20),\n"
"    OSD_OUT_ARRAY(OSD_REAL, wDss, 20),\n"
"    OSD_OUT_ARRAY(OSD_REAL, wDst, 20),\n"
"    OSD_OUT_ARRAY(OSD_REAL, wDtt, 20)) {\n"
"\n"
"    OSD_REAL derivSign = 1.0f;\n"
"\n"
"    if ((patchType == OSD_PATCH_DESCRIPTOR_LOOP) ||\n"
"        (patchType == OSD_PATCH_DESCRIPTOR_GREGORY_TRIANGLE) ||\n"
"        (patchType == OSD_PATCH_DESCRIPTOR_TRIANGLES)) {\n"
"        OSD_REAL uv[2] = OSD_ARRAY_2(OSD_REAL, s, t);\n"
"        OsdPatchParamNormalizeTriangle(param, uv);\n"
"        s = uv[0];\n"
"        t = uv[1];\n"
"        if (OsdPatchParamIsTriangleRotated(param)) {\n"
"            derivSign = -1.0f;\n"
"        }\n"
"    } else {\n"
"        OSD_REAL uv[2] = OSD_ARRAY_2(OSD_REAL, s, t);\n"
"        OsdPatchParamNormalize(param, uv);\n"
"        s = uv[0];\n"
"        t = uv[1];\n"
"    }\n"
"\n"
"    int nPoints = OsdEvaluatePatchBasisNormalized(\n"
"        patchType, param, s, t, wP, wDs, wDt, wDss, wDst, wDtt);\n"
"\n"
"    if (OSD_OPTIONAL(wDs && wDt)) {\n"
"        OSD_REAL d1Scale =\n"
"                derivSign * OSD_REAL_CAST(1 << OsdPatchParamGetDepth(param));\n"
"\n"
"        for (int i = 0; i < nPoints; ++i) {\n"
"            wDs[i] *= d1Scale;\n"
"            wDt[i] *= d1Scale;\n"
"        }\n"
"\n"
"        if (OSD_OPTIONAL(wDss && wDst && wDtt)) {\n"
"            OSD_REAL d2Scale = derivSign * d1Scale * d1Scale;\n"
"\n"
"            for (int i = 0; i < nPoints; ++i) {\n"
"                wDss[i] *= d2Scale;\n"
"                wDst[i] *= d2Scale;\n"
"                wDtt[i] *= d2Scale;\n"
"            }\n"
"        }\n"
"    }\n"
"    return nPoints;\n"
"}\n"
"\n"
"#endif /* OPENSUBDIV3_OSD_PATCH_BASIS_COMMON_EVAL_H */\n"
"\n"
